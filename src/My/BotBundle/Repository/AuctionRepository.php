<?php

namespace My\BotBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

/**
 * AuctionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AuctionRepository extends EntityRepository
{
	/**
	 * Get hydrated array
	 */
	public function getHydrated($status)
	{
		$qb = $this->getEntityManager()->createQueryBuilder();
		if ($status == 'active') {
			$qb->select('a')->from('\MyBotBundle:Auction', 'a')
				->where('a.status = 1')
				->orderBy('a.endAt', 'ASC')
				->setMaxResults(3);
		} else {
			$qb->select('a')->from('\MyBotBundle:Auction', 'a')
				->where('a.status = 0')
				->orderBy('a.endAt', 'DESC')
				->setMaxResults(1);
		}

		$info = $qb->getQuery()->getResult();
		$data = $this->hydrate($info);
		return $data;
	}


	/**
	 * Hydrates auction for ko
	 */
	private function hydrate($info)
	{
		$data = array();
		foreach ($info as $item) {
			$data[] = array(
				'auctionId'	=> $item->getId(),
				'status'	=> $item->getStatus(),
				'step'		=> $item->getStep(),
				'startAt'	=> $item->getStartAt()->format('Y-m-d H:i:s'),
				'endAt'		=> $item->getEndAt()->diff(new \DateTime())->format('%R%H:%I:%S'),

				'productId'		=> $item->getProduct()->getId(),
				'productName'	=> $item->getProduct()->getName(),
				'productRetail'	=> $item->getProduct()->getRetail(),

				'price'		=> ($item->getBids()->count() ? $item->getBids()->last()->getPrice() : '-.--'),
				'userId'	=> ($item->getBids()->count() ? $item->getBids()->last()->getUser()->getId() : '-'),
				'userName'	=> ($item->getBids()->count() ? $item->getBids()->last()->getUser()->getUsername() : '-'),
				'source'	=> ($item->getBids()->count() ? $item->getBids()->last()->getSource() : '-'),
			);
		}

		usort($data, function($a, $b) {return ($a['auctionId'] >= $b['auctionId'] ? 1 : -1);});

		return $data;
	}


	/**
	 * Get Oldest Active
	 */
	public function getScrapeIds()
	{
		$qb = $this->getEntityManager()->createQueryBuilder();
		$auctionIds = $qb->select('a.id')->from('\MyBotBundle:Auction', 'a')
			->where('a.status = 1')
			->getQuery()
			->getResult();

		$qb = $this->getEntityManager()->createQueryBuilder();
		$lastId = $qb->select('a.id')->from('\MyBotBundle:Auction', 'a')
			->orderBy('a.id', 'DESC')
			->setMaxResults(1)
			->getQuery()
			->getResult();

		if (!$lastId) {
			$lastId[0]['id'] = 7280;
		}

		$data = array();
		foreach ($auctionIds as $auctionId) {
			$data['auction_' . $auctionId['id']] = $auctionId['id'];
		}

		while (count($data) < 16) {
			$lastId[0]['id']++;
			$data['auction_' . $lastId[0]['id']] = (string)$lastId[0]['id'];
		}

		return $data;
	}
}